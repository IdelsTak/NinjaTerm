package ninja.mbedded.ninjaterm.util.streamedText;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Node;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import ninja.mbedded.ninjaterm.util.debugging.Debugging;

import java.util.ArrayList;
import java.util.List;

/**
 * Class which is designed to encapsulate a "unit" of streamed text, which is generated by the ANSI escape
 * code parser. This <code>{@link StreamedTextV2}</code> object is then fed into the filter engine,
 * whose output is another <code>{@link StreamedTextV2}</code> object.
 *
 * @author Geoffrey Hunter <gbmhunter@gmail.com> (www.mbedded.ninja)
 * @last-modified 2016-09-29
 * @since 2016-09-28
 */
public class StreamedTextV2 {

    public String text = "";
    public List<TextColourV2> textColours = new ArrayList<>();

    public void removeChars(int numChars) {

    }



    /**
     * The method extracts the specified number of chars from the input and places them in the output.
     * It extract chars from the "to append" String first, and then starts removing chars from the first of the
     * Text nodes contained within the list.
     * <p>
     * It also shifts any chars from still existing input nodes into the "to append" String
     * as appropriate.
     *
     * @param inputStreamedText
     * @param numChars
     * @return
     */
    public static void shiftChars(StreamedTextV2 inputStreamedText, StreamedTextV2 outputStreamedText, int numChars) {


    }

    /**
     * The method copies the specified number of chars from the input into the output.
     * It copies chars from the "to append" String first, and then starts copying chars from the first of the
     * Text nodes contained within the list.
     * <p>
     * It also copies any chars from still existing input nodes into the "to append" String
     * as appropriate.
     *
     * @param inputStreamedText
     * @param numChars
     * @return
     */
    public static void copyChars(StreamedTextV2 inputStreamedText, StreamedTextV2 outputStreamedText, int numChars) {

        if (numChars < 0)
            throw new IllegalArgumentException("numChars cannot be negative.");


    }

    public static void copyAnyEmptyNodes(StreamedTextV2 inputStreamedText, StreamedTextV2 outputStreamedText) {


    }

    /**
     * Adds the provided text to the stream, using the given <code>addMethod</code>.
     *
     * @param textToAppend
     */
    public void append(String textToAppend) {
        System.out.println("append() called with text = \"" + Debugging.convertNonPrintable(textToAppend) + "\".");

        text = text + textToAppend;

    }

    public void addColour(int position, Color color) {
        textColours.add(new TextColourV2(position, color));
    }


    @Override
    public String toString() {
        return text;
    }
}
